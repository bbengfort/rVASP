// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Specifies the RPC the command is wrapping in the bidirectional stream.
type RPC int32

const (
	RPC_NORPC    RPC = 0
	RPC_TRANSFER RPC = 1
	RPC_ACCOUNT  RPC = 2
)

var RPC_name = map[int32]string{
	0: "NORPC",
	1: "TRANSFER",
	2: "ACCOUNT",
}

var RPC_value = map[string]int32{
	"NORPC":    0,
	"TRANSFER": 1,
	"ACCOUNT":  2,
}

func (x RPC) String() string {
	return proto.EnumName(RPC_name, int32(x))
}

func (RPC) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// Allows for standardized error handling for demo purposes.
type Error struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Describes a simple transaction between an originator and beneficiary, identified by
// their email addresses or other client-specific ID.
// TODO: handle currency better than just using a simple float.
// TODO: include other diagnostic information in the transaction like IVMS 101 data,
// which will presumably be stored by the rVASP in order to make the transaction.
type Transaction struct {
	Originator           string   `protobuf:"bytes,1,opt,name=originator,proto3" json:"originator,omitempty"`
	Beneficiary          string   `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	Amount               float32  `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Timestamp            string   `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetOriginator() string {
	if m != nil {
		return m.Originator
	}
	return ""
}

func (m *Transaction) GetBeneficiary() string {
	if m != nil {
		return m.Beneficiary
	}
	return ""
}

func (m *Transaction) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transaction) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type TransferRequest struct {
	Transaction          *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TransferRequest) Reset()         { *m = TransferRequest{} }
func (m *TransferRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()    {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferRequest.Unmarshal(m, b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
}
func (m *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(m, src)
}
func (m *TransferRequest) XXX_Size() int {
	return xxx_messageInfo_TransferRequest.Size(m)
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type TransferReply struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferReply) Reset()         { *m = TransferReply{} }
func (m *TransferReply) String() string { return proto.CompactTextString(m) }
func (*TransferReply) ProtoMessage()    {}
func (*TransferReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *TransferReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferReply.Unmarshal(m, b)
}
func (m *TransferReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferReply.Marshal(b, m, deterministic)
}
func (m *TransferReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferReply.Merge(m, src)
}
func (m *TransferReply) XXX_Size() int {
	return xxx_messageInfo_TransferReply.Size(m)
}
func (m *TransferReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferReply.DiscardUnknown(m)
}

var xxx_messageInfo_TransferReply proto.InternalMessageInfo

func (m *TransferReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type AccountRequest struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountRequest) Reset()         { *m = AccountRequest{} }
func (m *AccountRequest) String() string { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()    {}
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *AccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountRequest.Unmarshal(m, b)
}
func (m *AccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountRequest.Marshal(b, m, deterministic)
}
func (m *AccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRequest.Merge(m, src)
}
func (m *AccountRequest) XXX_Size() int {
	return xxx_messageInfo_AccountRequest.Size(m)
}
func (m *AccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRequest proto.InternalMessageInfo

func (m *AccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type AccountReply struct {
	Error                *Error         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AccountReply) Reset()         { *m = AccountReply{} }
func (m *AccountReply) String() string { return proto.CompactTextString(m) }
func (*AccountReply) ProtoMessage()    {}
func (*AccountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *AccountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountReply.Unmarshal(m, b)
}
func (m *AccountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountReply.Marshal(b, m, deterministic)
}
func (m *AccountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountReply.Merge(m, src)
}
func (m *AccountReply) XXX_Size() int {
	return xxx_messageInfo_AccountReply.Size(m)
}
func (m *AccountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountReply.DiscardUnknown(m)
}

var xxx_messageInfo_AccountReply proto.InternalMessageInfo

func (m *AccountReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *AccountReply) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// A wrapper for the TransferRequet and AccountRequest RPCs to be sent via streaming.
type Command struct {
	Type   RPC    `protobuf:"varint,1,opt,name=type,proto3,enum=pb.RPC" json:"type,omitempty"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Client string `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	// only one of these fields can be set, and the field that is set should
	// match the RPC type described above.
	//
	// Types that are valid to be assigned to Message:
	//	*Command_Transfer
	//	*Command_Account
	Message              isCommand_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetType() RPC {
	if m != nil {
		return m.Type
	}
	return RPC_NORPC
}

func (m *Command) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Command) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type isCommand_Message interface {
	isCommand_Message()
}

type Command_Transfer struct {
	Transfer *TransferRequest `protobuf:"bytes,11,opt,name=transfer,proto3,oneof"`
}

type Command_Account struct {
	Account *AccountRequest `protobuf:"bytes,12,opt,name=account,proto3,oneof"`
}

func (*Command_Transfer) isCommand_Message() {}

func (*Command_Account) isCommand_Message() {}

func (m *Command) GetMessage() isCommand_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Command) GetTransfer() *TransferRequest {
	if x, ok := m.GetMessage().(*Command_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *Command) GetAccount() *AccountRequest {
	if x, ok := m.GetMessage().(*Command_Account); ok {
		return x.Account
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Command) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Command_OneofMarshaler, _Command_OneofUnmarshaler, _Command_OneofSizer, []interface{}{
		(*Command_Transfer)(nil),
		(*Command_Account)(nil),
	}
}

func _Command_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Command)
	// message
	switch x := m.Message.(type) {
	case *Command_Transfer:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *Command_Account:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Account); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Command.Message has unexpected type %T", x)
	}
	return nil
}

func _Command_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Command)
	switch tag {
	case 11: // message.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferRequest)
		err := b.DecodeMessage(msg)
		m.Message = &Command_Transfer{msg}
		return true, err
	case 12: // message.account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountRequest)
		err := b.DecodeMessage(msg)
		m.Message = &Command_Account{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Command_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Command)
	// message
	switch x := m.Message.(type) {
	case *Command_Transfer:
		s := proto.Size(x.Transfer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_Account:
		s := proto.Size(x.Account)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Message is either a wrapper for a TransferReply or AccountReply RPCs or it is a live
// update message sent from the rVASP to show the communication interactions of the
// InterVASP protocol. If it is a wrapper, then type will be > 0 and the ID will match
// the id of the command request sent by the client. Otherwise both of these fields will
// be zero and the update string will be populated.
type Message struct {
	Type      RPC    `protobuf:"varint,1,opt,name=type,proto3,enum=pb.RPC" json:"type,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Update    string `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// if type and id are greater than zero, one of these fields will be set, matching
	// the RPC type described above.
	//
	// Types that are valid to be assigned to Message:
	//	*Message_Transfer
	//	*Message_Account
	Message              isMessage_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() RPC {
	if m != nil {
		return m.Type
	}
	return RPC_NORPC
}

func (m *Message) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetUpdate() string {
	if m != nil {
		return m.Update
	}
	return ""
}

func (m *Message) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type isMessage_Message interface {
	isMessage_Message()
}

type Message_Transfer struct {
	Transfer *TransferReply `protobuf:"bytes,11,opt,name=transfer,proto3,oneof"`
}

type Message_Account struct {
	Account *AccountReply `protobuf:"bytes,12,opt,name=account,proto3,oneof"`
}

func (*Message_Transfer) isMessage_Message() {}

func (*Message_Account) isMessage_Message() {}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Message) GetTransfer() *TransferReply {
	if x, ok := m.GetMessage().(*Message_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *Message) GetAccount() *AccountReply {
	if x, ok := m.GetMessage().(*Message_Account); ok {
		return x.Account
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Transfer)(nil),
		(*Message_Account)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// message
	switch x := m.Message.(type) {
	case *Message_Transfer:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *Message_Account:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Account); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Message has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 11: // message.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferReply)
		err := b.DecodeMessage(msg)
		m.Message = &Message_Transfer{msg}
		return true, err
	case 12: // message.account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountReply)
		err := b.DecodeMessage(msg)
		m.Message = &Message_Account{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// message
	switch x := m.Message.(type) {
	case *Message_Transfer:
		s := proto.Size(x.Transfer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Account:
		s := proto.Size(x.Account)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("pb.RPC", RPC_name, RPC_value)
	proto.RegisterType((*Error)(nil), "pb.Error")
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*TransferRequest)(nil), "pb.TransferRequest")
	proto.RegisterType((*TransferReply)(nil), "pb.TransferReply")
	proto.RegisterType((*AccountRequest)(nil), "pb.AccountRequest")
	proto.RegisterType((*AccountReply)(nil), "pb.AccountReply")
	proto.RegisterType((*Command)(nil), "pb.Command")
	proto.RegisterType((*Message)(nil), "pb.Message")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x63, 0x27, 0xa9, 0xeb, 0x71, 0x9a, 0x86, 0x41, 0x42, 0x56, 0x40, 0x10, 0xf9, 0x14,
	0xb5, 0x28, 0xb4, 0x29, 0x95, 0xb8, 0x06, 0xb7, 0xa8, 0x95, 0x20, 0x8d, 0x36, 0xe9, 0x03, 0x6c,
	0xec, 0x6d, 0xb4, 0x52, 0xec, 0x35, 0xeb, 0x0d, 0x52, 0x4e, 0x9c, 0x78, 0x2b, 0x9e, 0x83, 0xe7,
	0x41, 0x5e, 0x6f, 0xfe, 0x91, 0x08, 0xc1, 0x6d, 0x67, 0x34, 0x33, 0xfb, 0xfd, 0xbe, 0x59, 0x1b,
	0x5c, 0x9a, 0xf1, 0x5e, 0x26, 0x85, 0x12, 0x68, 0x67, 0xd3, 0xe0, 0x1a, 0xea, 0xb7, 0x52, 0x0a,
	0x89, 0x08, 0xb5, 0x48, 0xc4, 0xcc, 0xb7, 0x3a, 0x56, 0xb7, 0x4e, 0xf4, 0x19, 0x7d, 0x70, 0x12,
	0x96, 0xe7, 0x74, 0xc6, 0x7c, 0xbb, 0x63, 0x75, 0x5d, 0xb2, 0x0a, 0x83, 0x1f, 0x16, 0x78, 0x13,
	0x49, 0xd3, 0x9c, 0x46, 0x8a, 0x8b, 0x14, 0x5f, 0x03, 0x08, 0xc9, 0x67, 0x3c, 0xa5, 0x4a, 0x48,
	0x3d, 0xc3, 0x25, 0x5b, 0x19, 0xec, 0x80, 0x37, 0x65, 0x29, 0x7b, 0xe2, 0x11, 0xa7, 0x72, 0x69,
	0xa6, 0x6d, 0xa7, 0xf0, 0x05, 0x1c, 0xd1, 0x44, 0x2c, 0x52, 0xe5, 0x57, 0x3b, 0x56, 0xd7, 0x26,
	0x26, 0xc2, 0x57, 0xe0, 0x2a, 0x9e, 0xb0, 0x5c, 0xd1, 0x24, 0xf3, 0x6b, 0xba, 0x6f, 0x93, 0x08,
	0x6e, 0xe0, 0x54, 0xcb, 0x78, 0x62, 0x92, 0xb0, 0xaf, 0x0b, 0x96, 0x2b, 0xbc, 0x04, 0x4f, 0x6d,
	0x94, 0x69, 0x2d, 0x5e, 0xff, 0xb4, 0x97, 0x4d, 0x7b, 0x5b, 0x82, 0xc9, 0x76, 0x4d, 0x70, 0x01,
	0x27, 0x9b, 0x29, 0xd9, 0x7c, 0x89, 0x6f, 0xa0, 0xce, 0x0a, 0x57, 0x4c, 0xb7, 0x5b, 0x74, 0x6b,
	0x9b, 0x48, 0x99, 0x0f, 0xce, 0xa0, 0x39, 0x88, 0xa2, 0x42, 0xe0, 0xea, 0x5a, 0x1f, 0x1c, 0x5a,
	0x66, 0x0c, 0xfe, 0x2a, 0x0c, 0x62, 0x68, 0xac, 0x6b, 0xff, 0x65, 0x38, 0x5e, 0x41, 0x63, 0x4b,
	0x5d, 0xee, 0xdb, 0x9d, 0xea, 0x21, 0x84, 0x9d, 0xa2, 0xe0, 0xa7, 0x05, 0x4e, 0x28, 0x92, 0x84,
	0xa6, 0x31, 0xbe, 0x84, 0x9a, 0x5a, 0x66, 0xe5, 0x2e, 0x9b, 0x7d, 0xa7, 0x68, 0x24, 0xa3, 0x90,
	0xe8, 0x24, 0x36, 0xc1, 0xe6, 0xb1, 0xde, 0x40, 0x8d, 0xd8, 0x3c, 0x2e, 0x8c, 0x8f, 0xe6, 0x9c,
	0x19, 0xe3, 0x5d, 0x62, 0x22, 0xbc, 0x84, 0x63, 0x65, 0x4c, 0xf1, 0x3d, 0xad, 0xf4, 0xf9, 0x5a,
	0xc1, 0xc6, 0xee, 0xbb, 0x0a, 0x59, 0x97, 0x61, 0x6f, 0xe3, 0x41, 0x43, 0x77, 0x60, 0xd1, 0xb1,
	0x6b, 0xd4, 0x5d, 0x65, 0xed, 0xcc, 0x47, 0x77, 0xfd, 0xbe, 0x82, 0x5f, 0x16, 0x38, 0x5f, 0xca,
	0xf3, 0x7f, 0xcb, 0x5f, 0x64, 0x31, 0x55, 0x6c, 0x25, 0xbf, 0x8c, 0xfe, 0xfe, 0x6e, 0xf0, 0xdd,
	0x1e, 0xdc, 0xb3, 0x5d, 0xb8, 0x6c, 0xbe, 0xdc, 0x41, 0x7b, 0xfb, 0x27, 0x5a, 0x6b, 0x07, 0xad,
	0x2c, 0x3f, 0x00, 0x76, 0x76, 0x0e, 0x55, 0x32, 0x0a, 0xd1, 0x85, 0xfa, 0xf0, 0x81, 0x8c, 0xc2,
	0x56, 0x05, 0x1b, 0x70, 0x3c, 0x21, 0x83, 0xe1, 0xf8, 0xd3, 0x2d, 0x69, 0x59, 0xe8, 0x81, 0x33,
	0x08, 0xc3, 0x87, 0xc7, 0xe1, 0xa4, 0x65, 0xf7, 0x3f, 0x80, 0x3b, 0x21, 0xf7, 0xe3, 0xc1, 0x0d,
	0x4b, 0x04, 0x9e, 0x83, 0xf7, 0x99, 0x7f, 0x63, 0x8f, 0x9a, 0x27, 0x47, 0xaf, 0xb8, 0xd0, 0x6c,
	0xb8, 0xad, 0x03, 0xe3, 0x57, 0xd7, 0xba, 0xb0, 0xfa, 0xdf, 0xa1, 0xa5, 0x3b, 0xef, 0x53, 0xc5,
	0x66, 0x92, 0xea, 0x8f, 0xf2, 0x3d, 0xc0, 0x0a, 0x68, 0x22, 0xf0, 0xd0, 0xf6, 0xda, 0xfb, 0xd4,
	0x78, 0x0d, 0x27, 0x06, 0x6b, 0xac, 0xa8, 0x5a, 0xe4, 0x78, 0x60, 0x89, 0xed, 0x3d, 0xfa, 0xe9,
	0x91, 0xfe, 0xa7, 0x5c, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x87, 0x2f, 0x2b, 0x60, 0x60, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TRISADemoClient is the client API for TRISADemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TRISADemoClient interface {
	LiveUpdates(ctx context.Context, opts ...grpc.CallOption) (TRISADemo_LiveUpdatesClient, error)
}

type tRISADemoClient struct {
	cc *grpc.ClientConn
}

func NewTRISADemoClient(cc *grpc.ClientConn) TRISADemoClient {
	return &tRISADemoClient{cc}
}

func (c *tRISADemoClient) LiveUpdates(ctx context.Context, opts ...grpc.CallOption) (TRISADemo_LiveUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TRISADemo_serviceDesc.Streams[0], "/pb.TRISADemo/LiveUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &tRISADemoLiveUpdatesClient{stream}
	return x, nil
}

type TRISADemo_LiveUpdatesClient interface {
	Send(*Command) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type tRISADemoLiveUpdatesClient struct {
	grpc.ClientStream
}

func (x *tRISADemoLiveUpdatesClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tRISADemoLiveUpdatesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TRISADemoServer is the server API for TRISADemo service.
type TRISADemoServer interface {
	LiveUpdates(TRISADemo_LiveUpdatesServer) error
}

func RegisterTRISADemoServer(s *grpc.Server, srv TRISADemoServer) {
	s.RegisterService(&_TRISADemo_serviceDesc, srv)
}

func _TRISADemo_LiveUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TRISADemoServer).LiveUpdates(&tRISADemoLiveUpdatesServer{stream})
}

type TRISADemo_LiveUpdatesServer interface {
	Send(*Message) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type tRISADemoLiveUpdatesServer struct {
	grpc.ServerStream
}

func (x *tRISADemoLiveUpdatesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tRISADemoLiveUpdatesServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TRISADemo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TRISADemo",
	HandlerType: (*TRISADemoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LiveUpdates",
			Handler:       _TRISADemo_LiveUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// TRISAIntegrationClient is the client API for TRISAIntegration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TRISAIntegrationClient interface {
	TransferTo(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error)
	AccountStatus(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
}

type tRISAIntegrationClient struct {
	cc *grpc.ClientConn
}

func NewTRISAIntegrationClient(cc *grpc.ClientConn) TRISAIntegrationClient {
	return &tRISAIntegrationClient{cc}
}

func (c *tRISAIntegrationClient) TransferTo(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error) {
	out := new(TransferReply)
	err := c.cc.Invoke(ctx, "/pb.TRISAIntegration/TransferTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRISAIntegrationClient) AccountStatus(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := c.cc.Invoke(ctx, "/pb.TRISAIntegration/AccountStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TRISAIntegrationServer is the server API for TRISAIntegration service.
type TRISAIntegrationServer interface {
	TransferTo(context.Context, *TransferRequest) (*TransferReply, error)
	AccountStatus(context.Context, *AccountRequest) (*AccountReply, error)
}

func RegisterTRISAIntegrationServer(s *grpc.Server, srv TRISAIntegrationServer) {
	s.RegisterService(&_TRISAIntegration_serviceDesc, srv)
}

func _TRISAIntegration_TransferTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISAIntegrationServer).TransferTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TRISAIntegration/TransferTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISAIntegrationServer).TransferTo(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRISAIntegration_AccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRISAIntegrationServer).AccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TRISAIntegration/AccountStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRISAIntegrationServer).AccountStatus(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TRISAIntegration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TRISAIntegration",
	HandlerType: (*TRISAIntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferTo",
			Handler:    _TRISAIntegration_TransferTo_Handler,
		},
		{
			MethodName: "AccountStatus",
			Handler:    _TRISAIntegration_AccountStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
